apiVersion: v1
kind: Namespace
metadata:
  name: image-upload
---
# Secret은 별도 파일(secrets.yaml)로 관리하세요
# secrets.yaml.example을 참고하여 secrets.yaml을 생성하세요
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: image-upload
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: api
        image: ghcr.io/hyjk826/testweb-dev-backend:latest  # 실제 이미지 주소로 변경 필요
        ports:
        - containerPort: 8000
        env:
        # S3_ENDPOINT_URL은 설정하지 않음 (AWS S3 자동 사용)
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: AWS_REGION
        - name: S3_BUCKET_NAME
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: S3_BUCKET_NAME
        - name: CORS_ORIGINS
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: CORS_ORIGINS
        - name: PORT
          value: "8000"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: backend-api-service
  namespace: image-upload
spec:
  selector:
    app: backend-api
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-api-ingress
  namespace: image-upload
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-api-service
            port:
              number: 8000
